"use strict";(self.webpackChunkreact_native_beyond_basics=self.webpackChunkreact_native_beyond_basics||[]).push([[2542],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},l=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),l=p(n),u=r,f=l["".concat(s,".").concat(u)]||l[u]||m[u]||i;return n?o.createElement(f,a(a({ref:t},d),{},{components:n})):o.createElement(f,a({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=l;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var p=2;p<i;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}l.displayName="MDXCreateElement"},3919:function(e,t,n){function o(e){return!0===/^(\w*:|\/\/)/.test(e)}function r(e){return void 0!==e&&!o(e)}n.d(t,{b:function(){return o},Z:function(){return r}})},4996:function(e,t,n){n.d(t,{C:function(){return i},Z:function(){return a}});var o=n(2263),r=n(3919);function i(){var e=(0,o.Z)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,i=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,o){var i=void 0===o?{}:o,a=i.forcePrependBaseUrl,c=void 0!==a&&a,s=i.absolute,p=void 0!==s&&s;if(!n)return n;if(n.startsWith("#"))return n;if((0,r.b)(n))return n;if(c)return t+n;var d=n.startsWith(t)?n:t+n.replace(/^\//,"");return p?e+d:d}(i,n,e,t)}}}function a(e,t){return void 0===t&&(t={}),(0,i().withBaseUrl)(e,t)}},4926:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),a=(n(4996),{sidebar_position:3}),c="Solution",s={unversionedId:"react-context/solution",id:"react-context/solution",isDocsHomePage:!1,title:"Solution",description:"First, we'll need to move the moodList and the handleSelectMood to the App.provider.tsx and expose them from context instead.",source:"@site/docs/react-context/solution.mdx",sourceDirName:"react-context",slug:"/react-context/solution",permalink:"/react-native-beyond-basics/docs/react-context/solution",editUrl:"https://github.com/kadikraman/react-native-beyond-basics/edit/main/website/docs/react-context/solution.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Exercise",permalink:"/react-native-beyond-basics/docs/react-context/exercise"},next:{title:"Async Storage",permalink:"/react-native-beyond-basics/docs/persisting-data/persist-data"}},p=[],d={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"solution"},"Solution"),(0,i.kt)("p",null,"First, we'll need to move the ",(0,i.kt)("inlineCode",{parentName:"p"},"moodList")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"handleSelectMood")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"App.provider.tsx")," and expose them from context instead."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="src/App.provider.tsx"',title:'"src/App.provider.tsx"'}," import React from 'react';\n+import { MoodOptionType, MoodOptionWithTimestamp } from './types';\n\n type AppContextType = {\n-  greeting: string;\n+  moodList: MoodOptionWithTimestamp[];\n+  handleSelectMood: (mood: MoodOptionType) => void;\n };\n\n const defaultValue = {\n-  greeting: '',\n+  moodList: [],\n+  handleSelectMood: () => {},\n };\n\n const AppContext = React.createContext<AppContextType>(defaultValue);\n\n export const AppProvider: React.FC = ({ children }) => {\n+  const [moodList, setMoodList] = React.useState<MoodOptionWithTimestamp[]>([]);\n+\n+  const handleSelectMood = React.useCallback((mood: MoodOptionType) => {\n+    setMoodList(current => [...current, { mood, timestamp: Date.now() }]);\n+  }, []);\n+\n   return (\n-    <AppContext.Provider value={{ greeting: 'Hello' }}>\n+    <AppContext.Provider value={{ moodList, handleSelectMood }}>\n       {children}\n     </AppContext.Provider>\n   );\n")),(0,i.kt)("p",null,"Next, we can remove them from ",(0,i.kt)("inlineCode",{parentName:"p"},"Home.screen.tsx")," and read them from context:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="src/screens/Home.screen.tsx"',title:'"src/screens/Home.screen.tsx"'}," import React from 'react';\n import { StyleSheet, View } from 'react-native';\n-import { MoodItemRow } from '../components/MoodItemRow';\n+import { useAppContext } from '../App.provider';\n import { MoodPicker } from '../components/MoodPicker';\n-import { MoodOptionType, MoodOptionWithTimestamp } from '../types';\n\n export const Home: React.FC = () => {\n-  const [moodList, setMoodList] = React.useState<MoodOptionWithTimestamp[]>([]);\n-\n-  const handleSelectMood = React.useCallback((mood: MoodOptionType) => {\n-    setMoodList(current => [...current, { mood, timestamp: Date.now() }]);\n-  }, []);\n+  const appContext = useAppContext();\n\n   return (\n     <View style={styles.container}>\n-      <MoodPicker onSelect={handleSelectMood} />\n-      {moodList.map(item => (\n-        <MoodItemRow item={item} key={item.timestamp} />\n-      ))}\n+      <MoodPicker onSelect={appContext.handleSelectMood} />\n     </View>\n   );\n };\n")),(0,i.kt)("p",null,"And finally we can display the past moods from the History tab:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="src/screens/History.screen.tsx"',title:'"src/screens/History.screen.tsx"'}," import React from 'react';\n-import { StyleSheet, View, Text } from 'react-native';\n+import { ScrollView } from 'react-native';\n import { useAppContext } from '../App.provider';\n+import { MoodItemRow } from '../components/MoodItemRow';\n\n\n export const History: React.FC = () => {\n   const appContext = useAppContext();\n\n   return (\n-    <View style={styles.container}>\n-      <Text>History</Text>\n-      <Text>{appContext.greeting}</Text>\n-    </View>\n+    <ScrollView>\n+      {appContext.moodList.map(item => (\n+        <MoodItemRow item={item} key={item.timestamp} />\n+      ))}\n+    </ScrollView>\n   );\n };\n-\n-const styles = StyleSheet.create({\n-  container: {\n-    flex: 1,\n-  },\n-});\n\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Checkpoint \ud83d\udd17")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/kadikraman/MoodTracker/commit/dd9c7138caaac2d307885b54c9d6c8bd31aa5bd2"},(0,i.kt)("strong",{parentName:"a"},"Move mood list to app context")," dd9c7138caaac2d307885b54c9d6c8bd31aa5bd2")))))}m.isMDXComponent=!0}}]);