"use strict";(self.webpackChunkreact_native_beyond_basics=self.webpackChunkreact_native_beyond_basics||[]).push([[3391],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return y}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),m=c(n),y=a,d=m["".concat(s,".").concat(y)]||m[y]||u[y]||i;return n?r.createElement(d,o(o({ref:t},l),{},{components:n})):r.createElement(d,o({ref:t},l))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4028:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o={sidebar_position:2,title:"TypeScript for React Native",description:"How we use TypeScript on React Native project"},p="TypeScript for React Native",s={unversionedId:"typescript/typescript-for-react-native",id:"typescript/typescript-for-react-native",isDocsHomePage:!1,title:"TypeScript for React Native",description:"How we use TypeScript on React Native project",source:"@site/docs/typescript/typescript-for-react-native.mdx",sourceDirName:"typescript",slug:"/typescript/typescript-for-react-native",permalink:"/react-native-beyond-basics/docs/typescript/typescript-for-react-native",editUrl:"https://github.com/kadikraman/react-native-beyond-basics/edit/main/website/docs/typescript/typescript-for-react-native.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"TypeScript for React Native",description:"How we use TypeScript on React Native project"},sidebar:"tutorialSidebar",previous:{title:"Intro to TypeScript",permalink:"/react-native-beyond-basics/docs/typescript/typescript"},next:{title:"Exercise",permalink:"/react-native-beyond-basics/docs/typescript/exercise"}},c=[{value:"Configuration with tsconfig.ts",id:"configuration-with-tsconfigts",children:[]},{value:"Declaring types",id:"declaring-types",children:[]},{value:"Optional types",id:"optional-types",children:[]},{value:"The &quot;or&quot; type",id:"the-or-type",children:[]},{value:"No return type",id:"no-return-type",children:[]},{value:"Typing React Components",id:"typing-react-components",children:[{value:"In JavaScript:",id:"in-javascript",children:[]},{value:"In TypeScript:",id:"in-typescript",children:[]}]},{value:"Typing React Component Props",id:"typing-react-component-props",children:[]}],l={toc:c};function u(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"typescript-for-react-native"},"TypeScript for React Native"),(0,i.kt)("p",null,"This isn't a course about TypeScript, but you'll need to know a little bit in order to follow along."),(0,i.kt)("p",null,"We will just do a quick intro to to what you'll need to know for this workshop."),(0,i.kt)("h2",{id:"configuration-with-tsconfigts"},"Configuration with tsconfig.ts"),(0,i.kt)("p",null,"Because we used a TypeScript template for building our project, all the setup is already done for us."),(0,i.kt)("p",null,"The main point of interest for us is the ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," which you can find at the root of your project. It allows you choose how strict you want to make your type checking to be, setting up module aliases and much more! The project template comes with sensible defaults, but you can read more about the available options and how to change them ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/tsconfig"},"here"),"."),(0,i.kt)("h2",{id:"declaring-types"},"Declaring types"),(0,i.kt)("p",null,"Suppose you had a user object that looked like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const user = {\n  name: 'Mary',\n  age: 25,\n  hobbies: ['running', 'coding', 'singing'],\n};\n")),(0,i.kt)("p",null,"To declare a type for this object we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," keyword:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"type User = {\n  name: string;\n  age: number;\n  hobbies: string[];\n};\n")),(0,i.kt)("p",null,"Then we can explicitly set the type of the object to be ",(0,i.kt)("inlineCode",{parentName:"p"},"User"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const user: User = {\n  name: 'Mary',\n  age: 25,\n  hobbies: ['running', 'coding', 'singing'],\n};\n")),(0,i.kt)("h2",{id:"optional-types"},"Optional types"),(0,i.kt)("p",null,"You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"?")," to denote an optional type. That means the arg is either as typed, or ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"type User = {\n  name: string;\n  age: number;\n  hobbies?: string[];\n};\n\nconst user1: User = {\n  name: 'Mary',\n  age: 25,\n  hobbies: ['running', 'coding', 'singing'],\n};\n\nconst user2: User = {\n  name: 'Paul',\n  age: 32,\n};\n")),(0,i.kt)("h2",{id:"the-or-type"},'The "or" type'),(0,i.kt)("p",null,"When the type can one of many things, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"|"),' which acts as an "or" between the options'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"type User = {\n  name: string;\n  age: number;\n  hobbies?: string[];\n  nationality: 'British' | 'American' | 'Estonian';\n};\n\nconst user1: User = {\n  name: 'Mary',\n  age: 25,\n  hobbies: ['running', 'coding', 'singing'],\n  nationality: 'British',\n};\n\nconst user2: User = {\n  name: 'Paul',\n  age: 32,\n  nationality: 'American',\n};\n")),(0,i.kt)("h2",{id:"no-return-type"},"No return type"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"void")," use used to denote the lack of return type that no return type is set."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const logger = (message: string): void => {\n  console.log(message);\n};\n")),(0,i.kt)("h2",{id:"typing-react-components"},"Typing React Components"),(0,i.kt)("p",null,"When typing React components, add ",(0,i.kt)("inlineCode",{parentName:"p"},"React.FC")," after the function name to declare that the return type is a function component."),(0,i.kt)("h3",{id:"in-javascript"},"In JavaScript:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Greeting.jsx"',title:'"Greeting.jsx"'},"import React from 'react';\nimport { Text } from 'react-native';\n\nexport const Greeting = () => {\n  return <Text>Hello</Text>;\n};\n")),(0,i.kt)("h3",{id:"in-typescript"},"In TypeScript:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Greeting.tsx"',title:'"Greeting.tsx"'},"import React from 'react';\nimport { Text } from 'react-native';\n\nexport const Greeting: React.FC = () => {\n  return <Text>Hello</Text>;\n};\n")),(0,i.kt)("h2",{id:"typing-react-component-props"},"Typing React Component Props"),(0,i.kt)("p",null,"You can type the properties of a component by passing in the type in ",(0,i.kt)("inlineCode",{parentName:"p"},"React.FC<{}>"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="User.jsx"',title:'"User.jsx"'},"import React from 'react';\nimport { Text } from 'react-native';\n\nexport const User = ({ firstName, lastName }) => {\n  return (\n    <Text>\n      {firstName} {lastName}\n    </Text>\n  );\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="User.tsx"',title:'"User.tsx"'},"import React from 'react';\nimport { Text } from 'react-native';\n\ntype UserProps = {\n  firstName: string;\n  lastName: string;\n};\n\nexport const User: React.FC<UserProps> = ({ firstName, lastName }) => {\n  return (\n    <Text>\n      {firstName} {lastName}\n    </Text>\n  );\n};\n")))}u.isMDXComponent=!0}}]);