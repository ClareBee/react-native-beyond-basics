(self.webpackChunkreact_native_beyond_basics=self.webpackChunkreact_native_beyond_basics||[]).push([[246],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=d(n),m=r,h=p["".concat(s,".").concat(m)]||p[m]||c[m]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3919:function(e,t,n){"use strict";function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function r(e){return void 0!==e&&!a(e)}n.d(t,{b:function(){return a},Z:function(){return r}})},4996:function(e,t,n){"use strict";n.d(t,{C:function(){return i},Z:function(){return o}});var a=n(2263),r=n(3919);function i(){var e=(0,a.default)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,i=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,a){var i=void 0===a?{}:a,o=i.forcePrependBaseUrl,l=void 0!==o&&o,s=i.absolute,d=void 0!==s&&s;if(!n)return n;if(n.startsWith("#"))return n;if((0,r.b)(n))return n;if(l)return t+n;var u=n.startsWith(t)?n:t+n.replace(/^\//,"");return d?e+u:u}(i,n,e,t)}}}function o(e,t){return void 0===t&&(t={}),(0,i().withBaseUrl)(e,t)}},7330:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return d},default:function(){return c}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),o=n(4996),l={sidebar_position:16},s={unversionedId:"gestures",id:"gestures",isDocsHomePage:!1,title:"Gestures and Animation",description:"One of the ways native mobile apps can be so much more powerful than mobile web is that you can use gestures.",source:"@site/docs/gestures.mdx",sourceDirName:".",slug:"/gestures",permalink:"/react-native-beyond-basics/docs/gestures",editUrl:"https://github.com/kadikraman/react-native-beyond-basics/edit/main/website/docs/gestures.mdx",version:"current",sidebarPosition:16,frontMatter:{sidebar_position:16},sidebar:"tutorialSidebar",previous:{title:"Layout Animation",permalink:"/react-native-beyond-basics/docs/animated-drawer"},next:{title:"Splash Screen",permalink:"/react-native-beyond-basics/docs/splash-screen"}},d=[{value:"Install Reanimated 2",id:"install-reanimated-2",children:[{value:"iOS only",id:"ios-only",children:[]},{value:"Android only",id:"android-only",children:[]},{value:"Rebuild everything",id:"rebuild-everything",children:[]}]},{value:"Add a delete function",id:"add-a-delete-function",children:[]},{value:"Checkpoint \ud83d\udd17",id:"checkpoint-",children:[]},{value:"Add swipe to delete",id:"add-swipe-to-delete",children:[{value:"Wrap MoodItemRow in a PanGestureHandler",id:"wrap-mooditemrow-in-a-pangesturehandler",children:[]}]},{value:"Checkpoint \ud83d\udd17",id:"checkpoint--1",children:[]},{value:"Delete item after swiping over a certain threshold",id:"delete-item-after-swiping-over-a-certain-threshold",children:[]},{value:"Checkpoint \ud83d\udd17",id:"checkpoint--2",children:[]}],u={toc:d};function c(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"One of the ways native mobile apps can be so much more powerful than mobile web is that you can use gestures."),(0,i.kt)("p",null,"Let's use gestures and animation to implement a swipe-to-delete UI for the mood history."),(0,i.kt)("p",null,"React Native comes with a built in animation capabilities using ",(0,i.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/animated"},"Animated"),", however the Animated api has been notoriously tricky to use. Instead, we will be using ",(0,i.kt)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-reanimated/docs/installation"},"react-native-reanimated v2"),"."),(0,i.kt)("h2",{id:"install-reanimated-2"},"Install Reanimated 2"),(0,i.kt)("p",null,"First, let's install and configure ",(0,i.kt)("a",{parentName:"p",href:"https://docs.swmansion.com/react-native-reanimated/docs/installation"},"Reanimated 2"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add react-native-reanimated@next\n")),(0,i.kt)("p",null,"Open ",(0,i.kt)("inlineCode",{parentName:"p"},"babel.config.js")," and add the following line:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"  module.exports = {\n      ...\n      plugins: [\n+          'react-native-reanimated/plugin',\n          ...\n      ],\n  };\n")),(0,i.kt)("p",null,"Make sure you also restart your packager with"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"yarn start --reset-cache\n")),(0,i.kt)("p",null,"in order for the babel plugin to get included."),(0,i.kt)("h3",{id:"ios-only"},"iOS only"),(0,i.kt)("p",null,"Install the native dependencies with"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"cd ios\npod install\n")),(0,i.kt)("h3",{id:"android-only"},"Android only"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Turn on Hermes engine by editing android/app/build.gradle")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"project.ext.react = [\n+  enableHermes: true\n]\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Plug Reanimated in MainApplication.java")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},'+  import com.facebook.react.bridge.JSIModulePackage;\n+  import com.swmansion.reanimated.ReanimatedJSIModulePackage;\n  ...\n  private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {\n  ...\n\n      @Override\n      protected String getJSMainModuleName() {\n        return "index";\n      }\n\n+      @Override\n+      protected JSIModulePackage getJSIModulePackage() {\n+        return new ReanimatedJSIModulePackage();\n+      }\n    };\n  ...\n')),(0,i.kt)("h3",{id:"rebuild-everything"},"Rebuild everything"),(0,i.kt)("p",null,"Restart the bundler and rebuild the app from XCode / Android Studio."),(0,i.kt)("h2",{id:"add-a-delete-function"},"Add a delete function"),(0,i.kt)("p",null,"First, open ",(0,i.kt)("inlineCode",{parentName:"p"},"App.provider.tsx")," and add a function that allows the user to delete a mode from the mood list. In this case we can use the timestamp as the unique identifier by which to locale the mood item in question."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const handleRemoveMood = React.useCallback((mood: MoodOptionWithTimestamp) => {\n  setMoodList((current) => {\n    const newValue = current.filter(\n      (item) => item.timestamp !== mood.timestamp\n    );\n    setAppData({ moods: newValue });\n    return newValue;\n  });\n}, []);\n")),(0,i.kt)("p",null,"Then, add a delete button to the ",(0,i.kt)("inlineCode",{parentName:"p"},"MoodItemRow.tsx")," that will call the ",(0,i.kt)("inlineCode",{parentName:"p"},"handleRemoveMood")," function with the current item:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { handleRemoveMood } = useAppContext();\n\n...\n\n<TouchableOpacity onPress={() => handleRemoveMood(item)}>\n  <Text style={styles.deleteText}>delete</Text>\n</TouchableOpacity>\n")),(0,i.kt)("h2",{id:"checkpoint-"},"Checkpoint \ud83d\udd17"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/kadikraman/mood-tracker/commit/617a3ea75972f0f0a434f8df31ce07bd425cd748"},(0,i.kt)("strong",{parentName:"a"},"Install react-native-reanimated and add a delete button to moods")," 617a3ea75972f0f0a434f8df31ce07bd425cd748")),(0,i.kt)("img",{src:(0,o.Z)("/img/gestures/delete-mood.png"),alt:"Delete mood",width:"500px"}),(0,i.kt)("h2",{id:"add-swipe-to-delete"},"Add swipe to delete"),(0,i.kt)("p",null,'The idea behind swipe to delete is this: we wrap the whole row in a GestureHandler, animate the row horizontally when the user "swipes", and trigger the "delete" animation if the user swipes across a certain threshold.'),(0,i.kt)("h3",{id:"wrap-mooditemrow-in-a-pangesturehandler"},"Wrap MoodItemRow in a PanGestureHandler"),(0,i.kt)("p",null,"First, let's wrap the whole ",(0,i.kt)("inlineCode",{parentName:"p"},"MoodItemRow")," component in a PanGestureHandler. This allows us to track gesture events within the designated area:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { PanGestureHandler } from "react-native-gesture-handler";\n\n...\n\n<PanGestureHandler\n  minDeltaX={1}\n  minDeltaY={100}>\n\n...\n\n</PanGestureHandler>\n')),(0,i.kt)("p",null,"Next, let's add a callback for ",(0,i.kt)("inlineCode",{parentName:"p"},"onGestureEvent")," - this gets called whenever the user interacts with the area within the gesture handler:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const onGestureEvent = React.useCallback(\n  (event: PanGestureHandlerGestureEvent) => {\n    console.warn(event.nativeEvent.translationX);\n  },\n  [],\n);\n\n<PanGestureHandler\n  minDeltaX={1}\n  minDeltaY={100}\n  onGestureEvent={onGestureEvent}>\n...\n")),(0,i.kt)("p",null,"Now we want to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"event.nativeEvent.translationX")," value and animate the row right or left based on how much the user has moved."),(0,i.kt)("p",null,"To store an animated value, we can use ",(0,i.kt)("inlineCode",{parentName:"p"},"useSharedValue"),", and to use it in an inline style we can use ",(0,i.kt)("inlineCode",{parentName:"p"},"useAnimatedStyle"),"."),(0,i.kt)("p",null,"Finally, in order to animate a view using an animated style, replace the ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," in question with ",(0,i.kt)("inlineCode",{parentName:"p"},"Animated.View"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import Animated, {\n  useAnimatedStyle,\n  useSharedValue,\n} from "react-native-reanimated";\n\n...\n\nconst offset = useSharedValue(0);\n\n...\n\nconst animatedStyles = useAnimatedStyle(() => ({\n  transform: [{ translateX: offset.value }],\n}));\n\nconst onGestureEvent = React.useCallback(\n  (event: PanGestureHandlerGestureEvent) => {\n    const xVal = Math.floor(event.nativeEvent.translationX);\n    offset.value = xVal;\n  },\n  [],\n);\n\n...\n\n<Animated.View style={[styles.moodItem, animatedStyles]}>\n...\n')),(0,i.kt)("p",null,"Lastly, we want to snap the row back to its original position if the user finishes dragging:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"...\n\nconst onHandlerStateChange = React.useCallback(() => {\n  offset.value = withTiming(0);\n}, [offset]);\n\n...\n\n<PanGestureHandler\n  minDeltaX={1}\n  minDeltaY={100}\n  onGestureEvent={onGestureEvent}\n  onHandlerStateChange={onHandlerStateChange}>\n\n...\n")),(0,i.kt)("p",null,"Notice that we set the value back ",(0,i.kt)("inlineCode",{parentName:"p"},"withTiming(0)")," - this ensures that the card will animate back instead of snapping."),(0,i.kt)("h2",{id:"checkpoint--1"},"Checkpoint \ud83d\udd17"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/kadikraman/mood-tracker/commit/677b4075d0ae2105b0331d43b7eb73f593e39e5d"},(0,i.kt)("strong",{parentName:"a"},"Add App Icons")," 677b4075d0ae2105b0331d43b7eb73f593e39e5d")),(0,i.kt)("h2",{id:"delete-item-after-swiping-over-a-certain-threshold"},"Delete item after swiping over a certain threshold"),(0,i.kt)("p",null,"Let's do it so that if the user swipes 80pt or more in either direction, the item gets deleted:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const maxPan = 80;\n\nconst [shouldRemove, setShouldRemove] = React.useState(false);\n\nconst onGestureEvent = React.useCallback(\n  (event: PanGestureHandlerGestureEvent) => {\n    const xVal = Math.floor(event.nativeEvent.translationX);\n\n    offset.value = xVal;\n\n    // use Absolute value so the user could swipe either left or right\n    if (Math.abs(xVal) <= maxPan) {\n      setShouldRemove(false);\n    } else {\n      setShouldRemove(true);\n    }\n  },\n  [offset]\n);\n\nconst onHandlerStateChange = React.useCallback(\n  (event: PanGestureHandlerStateChangeEvent) => {\n    if (event.nativeEvent.state === GestureState.END) {\n      if (shouldRemove) {\n        // if the item should be remove, animate it off the screen first\n        offset.value = withTiming(Math.sign(offset.value) * 2000);\n\n        // use LayoutAnimation to ensure the rest of the page animates up nicely\n        LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);\n\n        // then trigger the remove mood item with a small delay\n        setTimeout(() => {\n          handleRemoveMood(item);\n        }, 250);\n      } else {\n        // otherwise, animate the item back to the start\n        offset.value = withTiming(0);\n      }\n    }\n  },\n  [handleRemoveMood, item, offset, shouldRemove]\n);\n")),(0,i.kt)("h2",{id:"checkpoint--2"},"Checkpoint \ud83d\udd17"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/kadikraman/mood-tracker/commit/2eef11e7670462db3056bbe8b4810fab3b1ed367"},(0,i.kt)("strong",{parentName:"a"},"Remove item when swiped")," 2eef11e7670462db3056bbe8b4810fab3b1ed367")))}c.isMDXComponent=!0}}]);