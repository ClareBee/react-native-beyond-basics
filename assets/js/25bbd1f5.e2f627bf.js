"use strict";(self.webpackChunkreact_native_beyond_basics=self.webpackChunkreact_native_beyond_basics||[]).push([[4689],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=l(n),u=r,k=m["".concat(c,".").concat(u)]||m[u]||d[u]||a;return n?o.createElement(k,s(s({ref:t},p),{},{components:n})):o.createElement(k,s({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3919:function(e,t,n){function o(e){return!0===/^(\w*:|\/\/)/.test(e)}function r(e){return void 0!==e&&!o(e)}n.d(t,{b:function(){return o},Z:function(){return r}})},4996:function(e,t,n){n.d(t,{C:function(){return a},Z:function(){return s}});var o=n(2263),r=n(3919);function a(){var e=(0,o.Z)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,a=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,o){var a=void 0===o?{}:o,s=a.forcePrependBaseUrl,i=void 0!==s&&s,c=a.absolute,l=void 0!==c&&c;if(!n)return n;if(n.startsWith("#"))return n;if((0,r.b)(n))return n;if(i)return t+n;var p=n.startsWith(t)?n:t+n.replace(/^\//,"");return l?e+p:p}(a,n,e,t)}}}function s(e,t){return void 0===t&&(t={}),(0,a().withBaseUrl)(e,t)}},7107:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return m}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),s=n(4996),i={sidebar_position:5},c="Props and useCallback",l={unversionedId:"basic-components/props-and-use-callback",id:"basic-components/props-and-use-callback",isDocsHomePage:!1,title:"Props and useCallback",description:"Recall that we can pass props down to child components, e.g.",source:"@site/docs/basic-components/props-and-use-callback.mdx",sourceDirName:"basic-components",slug:"/basic-components/props-and-use-callback",permalink:"/react-native-beyond-basics/docs/basic-components/props-and-use-callback",editUrl:"https://github.com/kadikraman/react-native-beyond-basics/edit/main/website/docs/basic-components/props-and-use-callback.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Styling",permalink:"/react-native-beyond-basics/docs/basic-components/styling"},next:{title:"JavaScript Libraries",permalink:"/react-native-beyond-basics/docs/basic-components/javascript-libraries"}},p=[],d={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"props-and-usecallback"},"Props and useCallback"),(0,a.kt)("p",null,"Recall that we can pass props down to child components, e.g."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<User name="Mary">\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"type UserProps = {\n  name: string;\n};\n\nconst User: React.FC<UserProps> = ({ name }) => {\n  return <Text>{name}</Text>;\n};\n")),(0,a.kt)("p",null,"And ",(0,a.kt)("inlineCode",{parentName:"p"},"useCallback")," is a react hook for memoizing interactions within a React component."),(0,a.kt)("p",null,"When we save our mood options, we'll want to also record their timestamp. Let's create a new type for the mood option with the timestamp. Open ",(0,a.kt)("inlineCode",{parentName:"p"},"types.ts")," and add:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/types.ts"',title:'"src/types.ts"'},"export type MoodOptionWithTimestamp = {\n  mood: MoodOptionType;\n  timestamp: number;\n};\n")),(0,a.kt)("p",null,"Now open ",(0,a.kt)("inlineCode",{parentName:"p"},"Home.screen.tsx")," and add a useState variable to store out ",(0,a.kt)("inlineCode",{parentName:"p"},"moodList"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/screens/Home.screen.tsx"',title:'"src/screens/Home.screen.tsx"'},"import { MoodOptionType, MoodOptionWithTimestamp } from '../types';\nconst [moodList, setMoodList] = React.useState<MoodOptionWithTimestamp[]>([]);\n")),(0,a.kt)("p",null,"Next, we'll add a useCallback that takes a mood option, adds a timestamp to it and appends it to the list of moods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/screens/Home.screen.tsx"',title:'"src/screens/Home.screen.tsx"'},"const handleSelectMood = React.useCallback((mood: MoodOptionType) => {\n  setMoodList((current) => [...current, { mood, timestamp: Date.now() }]);\n}, []);\n")),(0,a.kt)("p",null,"Now let's pass it the callback as a prop to the ",(0,a.kt)("inlineCode",{parentName:"p"},"MoodPicker")," component:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/screens/Home.screen.tsx"',title:'"src/screens/Home.screen.tsx"'},"<MoodPicker onSelect={handleSelectMood} />\n")),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"MoodPicker")," component, let's add a type for the new prop:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/MoodPicker.tsx"',title:'"src/components/MoodPicker.tsx"'},"type MoodPickerProps = {\n  onSelect: (mood: MoodOptionType) => void;\n};\n\nexport const MoodPicker: React.FC<MoodPickerProps> = ({ onSelect }) => {\n")),(0,a.kt)("p",null,"And let's create a callback function that adds the calls ",(0,a.kt)("inlineCode",{parentName:"p"},"onSelect")," with the currently selected mood:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/MoodPicker.tsx"',title:'"src/components/MoodPicker.tsx"'},"const handleSelect = React.useCallback(() => {\n  if (selectedMood) {\n    onSelect(selectedMood);\n    setSelectedMood(undefined);\n  }\n}, [onSelect, selectedMood]);\n")),(0,a.kt)("p",null,"And let's call it ",(0,a.kt)("inlineCode",{parentName:"p"},"onPress"),' on the "Choose" button:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/MoodPicker.tsx"',title:'"src/components/MoodPicker.tsx"'},"<Pressable style={styles.button} onPress={handleSelect}>\n")),(0,a.kt)("p",null,"Now back in ",(0,a.kt)("inlineCode",{parentName:"p"},"Home.screen.tsx"),", we'll also want to list out the current mood list:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="src/screens/Home.screen.tsx"',title:'"src/screens/Home.screen.tsx"'},"<View style={styles.container}>\n  <MoodPicker onSelect={handleSelectMood} />\n+  {moodList.map((item) => (\n+    <Text key={item.timestamp}>\n+     {item.mood.emoji} {new Date(item.timestamp).toString()}\n+    </Text>\n+  ))}\n</View>\n")),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Checkpoint \ud83d\udd17")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},(0,a.kt)("a",{parentName:"p",href:"https://github.com/kadikraman/mood-tracker/commit/50407bd3642550a356eacd94215eeab4cd6649ac"},(0,a.kt)("strong",{parentName:"a"},"Display list of selected moods")," 50407bd3642550a356eacd94215eeab4cd6649ac")))),(0,a.kt)("img",{src:(0,s.Z)("/img/mood-picker/ios-exercise-4.png"),alt:"iOS mood list",width:"50%"}),(0,a.kt)("img",{src:(0,s.Z)("/img/mood-picker/android-exercise-4.png"),alt:"Android mood list",width:"50%"}))}m.isMDXComponent=!0}}]);