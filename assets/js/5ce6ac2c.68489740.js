"use strict";(self.webpackChunkreact_native_beyond_basics=self.webpackChunkreact_native_beyond_basics||[]).push([[7165],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(h,i(i({ref:t},l),{},{components:n})):a.createElement(h,i({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3827:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i={sidebar_position:1},s="React Context",c={unversionedId:"react-context/react-context",id:"react-context/react-context",isDocsHomePage:!1,title:"React Context",description:"You'll notice that currently our both the mood picker and the moods list are on the same page. We'd like the list of past moods to be in the history tab instead. The question is - how do we share state between the two tabs? As the screens are adjacent to each other in the component tree, we can't pass them down as props.",source:"@site/docs/react-context/react-context.mdx",sourceDirName:"react-context",slug:"/react-context/react-context",permalink:"/react-native-beyond-basics/docs/react-context/react-context",editUrl:"https://github.com/kadikraman/react-native-beyond-basics/edit/main/website/docs/react-context/react-context.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"JavaScript Libraries",permalink:"/react-native-beyond-basics/docs/basic-components/javascript-libraries"},next:{title:"Exercise",permalink:"/react-native-beyond-basics/docs/react-context/exercise"}},p=[{value:"Create a Provider",id:"create-a-provider",children:[]},{value:"Wrap your app in a context provider",id:"wrap-your-app-in-a-context-provider",children:[]},{value:"Access the context",id:"access-the-context",children:[]}],l={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"react-context"},"React Context"),(0,o.kt)("p",null,"You'll notice that currently our both the mood picker and the moods list are on the same page. We'd like the list of past moods to be in the history tab instead. The question is - how do we share state between the two tabs? As the screens are adjacent to each other in the component tree, we can't pass them down as props."),(0,o.kt)("p",null,"The solution therefore must involve storing the state ",(0,o.kt)("em",{parentName:"p"},"outside")," of either component. There are several ways to do this, ",(0,o.kt)("a",{parentName:"p",href:"https://redux.js.org/"},"redux")," being a popular choice."),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If you are going to use Redux for your own project, check out ",(0,o.kt)("a",{parentName:"p",href:"https://redux-toolkit.js.org/tutorials/quick-start"},"Redux Toolkit")," which lets you use redux with minimal boilerplate. It's also fully typed with TypeScript!"))),(0,o.kt)("p",null,"However, we will explore an alternative approach that's build into React and therefore also available in React Native - that is ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/context.html"},"React Context"),"."),(0,o.kt)("p",null,"React Context consists of two parts: a provider and a consumer."),(0,o.kt)("p",null,"A Provider is a top level component that stores the data."),(0,o.kt)("p",null,"A Consumer can consume all data within the Provider from anywhere in the component tree without having to pass the data down as props."),(0,o.kt)("p",null,"This means that if we wrap our whole app in a Provider, then the data within the provider will be available from anywhere in our app."),(0,o.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"danger")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"For production use, React Context is great for storing top level state - theme, application state etc. However you should be aware that a change context will cause a re-render in all the components that use it. You can have multiple React Contexts in your app, and for performance reasons it's best to keep them small and single-purpose."))),(0,o.kt)("h2",{id:"create-a-provider"},"Create a Provider"),(0,o.kt)("p",null,"To start using context, we'll first need to create a provider."),(0,o.kt)("p",null,"Add a new file in your ",(0,o.kt)("inlineCode",{parentName:"p"},"/src")," directory called ",(0,o.kt)("inlineCode",{parentName:"p"},"App.provider.tsx"),"."),(0,o.kt)("p",null,"A new context is created using the ",(0,o.kt)("inlineCode",{parentName:"p"},"createContext")," function where we pass in the default value for the context."),(0,o.kt)("p",null,"A Provider is a component that wraps component tree that should have access to context. The object passed in as the ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," to the provider will contain all the data that the child components will have access to."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/App.provider.tsx"',title:'"src/App.provider.tsx"'},"import React from 'react';\n\ntype AppContextType = {\n  greeting: string;\n};\n\nconst defaultValue = {\n  greeting: '',\n};\n\nconst AppContext = React.createContext<AppContextType>(defaultValue);\n\nexport const AppProvider: React.FC = ({ children }) => {\n  return (\n    <AppContext.Provider value={{ greeting: 'Hello' }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n")),(0,o.kt)("h2",{id:"wrap-your-app-in-a-context-provider"},"Wrap your app in a context provider"),(0,o.kt)("p",null,"Remember that context is only available from the components that are nested within the context provider."),(0,o.kt)("p",null,"In our case, let's put our context provider as high as possible, and wrap our whole app in ",(0,o.kt)("inlineCode",{parentName:"p"},"App.tsx"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="src/App.tsx"',title:'"src/App.tsx"'},'import * as React from "react";\nimport { NavigationContainer } from "@react-navigation/native";\nimport { RootNavigator } from "./screens/Root.navigator";\n+import { AppProvider } from "./App.provider";\n\n\nexport const App: React.FC = () => {\n  return (\n+    <AppProvider>\n        <NavigationContainer>\n          <RootNavigator />\n        </NavigationContainer>\n+    </AppProvider>\n  );\n};\n')),(0,o.kt)("h2",{id:"access-the-context"},"Access the context"),(0,o.kt)("p",null,"To access your context, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"useContext")," hook. It's usually handy to expose the context hook separately from your provider. Add the following to your ",(0,o.kt)("inlineCode",{parentName:"p"},"App.provider.tsx"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"export const useAppContext = () => React.useContext(AppContext);\n")),(0,o.kt)("p",null,"Now you'll be able to use the same context values from anywhere in your app, e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"History.screen.tsx"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="src/screens/History.screen.tsx"',title:'"src/screens/History.screen.tsx"'},"import React from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\n+import { useAppContext } from '../App.provider';\n\n\nexport const History: React.FC = () => {\n+  const appContext = useAppContext();\n\n  return (\n    <View style={styles.container}>\n      <Text>History</Text>\n+      <Text>{appContext.greeting}</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n")),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Checkpoint \ud83d\udd17")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/kadikraman/MoodTasynracker/commit/be6a79ae93c2095bc8f4510d109913b692b9f146"},(0,o.kt)("strong",{parentName:"a"},"Set up app context")," be6a79ae93c2095bc8f4510d109913b692b9f146")))))}d.isMDXComponent=!0}}]);