"use strict";(self.webpackChunkreact_native_beyond_basics=self.webpackChunkreact_native_beyond_basics||[]).push([[5348],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=i,g=m["".concat(l,".").concat(u)]||m[u]||p[u]||o;return n?a.createElement(g,r(r({ref:t},d),{},{components:n})):a.createElement(g,r({ref:t},d))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3919:function(e,t,n){function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function i(e){return void 0!==e&&!a(e)}n.d(t,{b:function(){return a},Z:function(){return i}})},4996:function(e,t,n){n.d(t,{C:function(){return o},Z:function(){return r}});var a=n(2263),i=n(3919);function o(){var e=(0,a.Z)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,o=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,a){var o=void 0===a?{}:a,r=o.forcePrependBaseUrl,s=void 0!==r&&r,l=o.absolute,c=void 0!==l&&l;if(!n)return n;if(n.startsWith("#"))return n;if((0,i.b)(n))return n;if(s)return t+n;var d=n.startsWith(t)?n:t+n.replace(/^\//,"");return c?e+d:d}(o,n,e,t)}}}function r(e,t){return void 0===t&&(t={}),(0,o().withBaseUrl)(e,t)}},2626:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return m}});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),r=n(4996),s={sidebar_position:1},l="Local Images",c={unversionedId:"images-and-icons/local-images",id:"images-and-icons/local-images",isDocsHomePage:!1,title:"Local Images",description:"There are two ways to add images to your app - you can either include them in your app bundle, or load them via a url. Local images are the ones included in the app bundle.",source:"@site/docs/images-and-icons/local-images.mdx",sourceDirName:"images-and-icons",slug:"/images-and-icons/local-images",permalink:"/react-native-beyond-basics/docs/images-and-icons/local-images",editUrl:"https://github.com/kadikraman/react-native-beyond-basics/edit/main/website/docs/images-and-icons/local-images.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Async Storage",permalink:"/react-native-beyond-basics/docs/persisting-data/persist-data"},next:{title:"Network Images",permalink:"/react-native-beyond-basics/docs/images-and-icons/network-images"}},d=[{value:"Adapting to Screen Sizes",id:"adapting-to-screen-sizes",children:[]},{value:"Sizing images",id:"sizing-images",children:[]}],p={toc:d};function m(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"local-images"},"Local Images"),(0,o.kt)("p",null,"There are two ways to add images to your app - you can either include them in your app bundle, or load them via a url. Local images are the ones included in the app bundle."),(0,o.kt)("p",null,"First, let's create an ",(0,o.kt)("inlineCode",{parentName:"p"},"/assets")," folder inside your project's ",(0,o.kt)("inlineCode",{parentName:"p"},"/src")," directory. This is a place to keep all your non-code files (images, icons, fonts etc)."),(0,o.kt)("p",null,'Right click -> "Save Image As", and save the image in your ',(0,o.kt)("inlineCode",{parentName:"p"},"/assets")," folder (Image from ",(0,o.kt)("a",{parentName:"p",href:"https://www.flaticon.com/free-icon/butterflies_4713806"},"FlatIcon"),")."),(0,o.kt)("img",{src:(0,r.Z)("/img/images/butterflies.png"),alt:"Butterflies image"}),(0,o.kt)("p",null,"Open ",(0,o.kt)("inlineCode",{parentName:"p"},"MoodPicker.tsx")," and at the top of the file, add a constant for the image source. In React Native, you need to use ",(0,o.kt)("inlineCode",{parentName:"p"},"require")," to get the path for a local image."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/MoodPicker.tsx"',title:'"src/components/MoodPicker.tsx"'},"const imageSrc = require('../../assets/butterflies.png');\n\n<Image source={imageSrc} />;\n")),(0,o.kt)("p",null,"And voila, you have rendered an image!"),(0,o.kt)("p",null,'Let\'s add a thank you page for then the user has selected a mood, and a call to action for "choose another mood":'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="src/components/MoodPicker.tsx"',title:'"src/components/MoodPicker.tsx"'},"\nexport const MoodPicker: React.FC<MoodPickerProps> = ({ onSelect }) => {\n  const [selectedMood, setSelectedMood] = React.useState<MoodOptionType>();\n+  const [hasSelected, setHasSelected] = React.useState(false);\n\n  const handleSelect = React.useCallback(() => {\n    if (selectedMood) {\n      onSelect(selectedMood);\n      setSelectedMood(undefined);\n+      setHasSelected(true);\n    }\n  }, [onSelect, selectedMood]);\n\n\n+  if (hasSelected) {\n+    return (\n+      <View style={styles.container}>\n+        <Image source={imageSrc} style={styles.image} />\n+        <Pressable style={styles.button} onPress={() => setHasSelected(false)}>\n+          <Text style={styles.buttonText}>Back</Text>\n+        </Pressable>\n+      </View>\n+    );\n+  }\n\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.heading}>How are you right now?</Text>\n\n")),(0,o.kt)("p",null,"Let's give the container a fixed height to ensure it doesn't change size between selections, and let's add a style for the image to center it within the container:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="src/components/MoodPicker.tsx"',title:'"src/components/MoodPicker.tsx"'},"container: {\n  borderWidth: 2,\n  borderColor: theme.colorPurple,\n  margin: 10,\n  borderRadius: 10,\n  padding: 20,\n+  justifyContent: 'space-between',\n+  height: 230,\n},\n+image: {\n+  alignSelf: 'center',\n+},\n")),(0,o.kt)("h3",{id:"adapting-to-screen-sizes"},"Adapting to Screen Sizes"),(0,o.kt)("p",null,'You would have noticed that when doing styling in React Native, we don\'t really use "pixels" or "ems" or "rems", but just "display points". This is because the "points" are relative depending on the screen size.'),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Pixel_density"},"pixel density")," of a screen denotes how many pixels a screen has per a inch or cm. What it comes down to is this: ",(0,o.kt)("inlineCode",{parentName:"p"},"width: 10")," in React Native ",(0,o.kt)("em",{parentName:"p"},"is not")," the same as ",(0,o.kt)("inlineCode",{parentName:"p"},'width: "10px"')," on the web. It actually means ",(0,o.kt)("inlineCode",{parentName:"p"},"width: (10 * pixel_density)px"),"."),(0,o.kt)("p",null,'An increased pixel density makes the displays looks more crisp and smooth, which is why the "retina displays" for mac and iPhone look so good. For a retina display, the pixel density is 3x a regular display. This makes for a wonderful user experience, but as developers, we will need to ensure that our image assets are large enough to support this high resolution. So e.g. if we wanted to display a ',(0,o.kt)("inlineCode",{parentName:"p"},"100x100")," image on a retina display then really to make it as crisp as possible, the actual file included needs to be 3x larger than the point density on the screen, so ",(0,o.kt)("inlineCode",{parentName:"p"},"300px x 300px"),"."),(0,o.kt)("p",null,"To make things more complicated, in the mobile world you need to support all kinds of devices and screens."),(0,o.kt)("p",null,"As a result, when including ",(0,o.kt)("inlineCode",{parentName:"p"},".png")," or ",(0,o.kt)("inlineCode",{parentName:"p"},".jpeg")," images in mobile application, it is standard practice to include the same image in 3 sizes to account for the different screen resolutions."),(0,o.kt)("p",null,"Here are the 2x and 3x versions of the same butterfly image. Download and add them to the same ",(0,o.kt)("inlineCode",{parentName:"p"},"/assets")," directory."),(0,o.kt)("img",{src:(0,r.Z)("/img/images/butterflies@2x.png"),alt:"Butterflies image"}),(0,o.kt)("img",{src:(0,r.Z)("/img/images/butterflies@3x.png"),alt:"Butterflies image"}),(0,o.kt)("p",null,"That's it! You don't actually have to do anything else here. React Native will determine the how large to make the image from the ",(0,o.kt)("inlineCode",{parentName:"p"},"butterflies.png")," and will automatically select the ",(0,o.kt)("inlineCode",{parentName:"p"},"2x")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"3x")," files based on the pixel density of the current device."),(0,o.kt)("h3",{id:"sizing-images"},"Sizing images"),(0,o.kt)("p",null,"By default, the images will be sized based on the resolution of the main image file. You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"width"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"height")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"aspectRatio")," to size the image, e.g. to render an image that is 100pt tall and twice as high:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"height: 100,\naspectRatio: 2,\n")),(0,o.kt)("p",null,"Using aspect ratio is handy, but sometimes you may want to give the image a fixed width and height, e.g."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"height: 100,\nwidth: 300,\n")),(0,o.kt)("p",null,"In this case you'll notice that the image gets cropped which may or may not what you want. In our case, cropping doesn't look the best. We can use the ",(0,o.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/image#resizemode"},"resizeMode")," prop on the image component to tell React Native how we want to handle image sizing. In the above case, ",(0,o.kt)("inlineCode",{parentName:"p"},'resizeMode="contain"')," comes in handy, as it ensures that given the ",(0,o.kt)("inlineCode",{parentName:"p"},"300x100pt"),' window we have for the image, we maintain the aspect ratio of the image and keep it "contained" within it.'),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Checkpoint \ud83d\udd17")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/kadikraman/MoodTracker/commit/1728ac9b2b0eb743a47104af72ed1816be8885b4"},(0,o.kt)("strong",{parentName:"a"},"Show a local image")," 1728ac9b2b0eb743a47104af72ed1816be8885b4")))),(0,o.kt)("img",{src:(0,r.Z)("/img/images/ios-local-image.png"),alt:"iOS local image",width:"50%"}),(0,o.kt)("img",{src:(0,r.Z)("/img/images/android-local-image.png"),alt:"Android local image",width:"50%"}))}m.isMDXComponent=!0}}]);